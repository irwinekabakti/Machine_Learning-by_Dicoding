# -*- coding: utf-8 -*-
"""SubmissionMLPemula.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ukWfLr1SGsZ141P5eCJ9B73J1XXayi1e
"""

!wget --no-check-certificate \
https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

import os
import zipfile

local_zip = '/content/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/')
zip_ref.close()

import os

scissors_folder = os.path.join('/content/rockpaperscissors/scissors')
paper_folder = os.path.join('/content/rockpaperscissors/paper')
rock_folder = os.path.join('/content/rockpaperscissors/rock')

print('Total scissors: ', len(os.listdir(scissors_folder)))
print('Total paper: ', len(os.listdir(paper_folder)))
print('Total rock: ', len(os.listdir(rock_folder)))

print('Pick filename image randomly: ')
file_scissors = os.listdir(scissors_folder)
print('Scissors: ', file_scissors[:5])

file_paper = os.listdir(paper_folder)
print('Paper: ', file_paper[:5])

file_rock = os.listdir(rock_folder)
print('Rock: ', file_rock[:5])

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt
import matplotlib.image as mtpimg

n_rows = 3
n_cols = 5

pic_index = 0
fig = plt.gcf()
fig.set_size_inches(n_cols * 5, n_rows * 3)

pic_index += 5
img_random_scissors = [os.path.join(scissors_folder, folname)
for folname in file_scissors[pic_index-5:pic_index]]

img_random_paper = [os.path.join(paper_folder, folname)
for folname in file_paper[pic_index-5:pic_index]]

img_random_rock = [os.path.join(rock_folder, folname)
for folname in file_rock[pic_index-5:pic_index]]


for i, img_path in enumerate(img_random_scissors+img_random_paper+img_random_rock) :
  show = plt.subplot(n_rows, n_cols, i + 1)
  show.axis('Off')

  img = mtpimg.imread(img_path)
  plt.imshow(img)

plt.show()

import tensorflow as tf
import keras_preprocessing
from keras_preprocessing import image
from keras_preprocessing.image import ImageDataGenerator

BASE_DIR = '/content/rockpaperscissors/rps-cv-images'
generator_from_data_training = ImageDataGenerator(
    validation_split = 0.4,
    fill_mode = 'nearest',
    horizontal_flip = True,
    rescale = 1./255,
    rotation_range = 20,
    width_shift_range = 0.2,
    height_shift_range = 0.2,
    shear_range = 0.2,
    zoom_range = 0.2 
)

data_train_generator = generator_from_data_training.flow_from_directory(
    BASE_DIR,
    class_mode = 'categorical',
    color_mode = 'rgb', 
    target_size = (150, 150),
    batch_size = 20,
    shuffle = True,
    subset = 'training'
)

data_validation_generator = generator_from_data_training.flow_from_directory(
    BASE_DIR,
    class_mode = 'categorical',
    color_mode = 'rgb', 
    target_size = (150, 150),
    batch_size = 20,
    shuffle = True,
    subset = 'validation'
)

data_train_generator.class_indices

data_validation_generator.class_indices

# callback
class historyCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs = {}):
    if(logs.get('val_accuracy')> 0.97):
      print('\n The Accuracy up to 97%, and forced to stop!')
      self.model.stop_training = True

callbacks = historyCallback()

model = tf.keras.models.Sequential([
    
    tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(32, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),

    tf.keras.layers.Dense(128, activation='relu'),

    tf.keras.layers.Dense(512, activation='relu'),

    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

model.compile(loss = 'categorical_crossentropy',
              optimizer='RMSprop',
              metrics=['accuracy'])

history = model.fit(
    data_train_generator,
    steps_per_epoch = 40,
    epochs = 30,
    validation_data = data_validation_generator,
    validation_steps = 5,
    verbose = 2,
    callbacks=[callbacks]
)

import matplotlib.pyplot as plt
acc = history.history['accuracy']
loss = history.history['loss']
validation_accuracy = history.history['val_accuracy']
validation_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training Accuracy')
plt.plot(epochs, validation_accuracy, 'b', label='Validation Accuracy')
plt.title('Graphics Accuracy Data Training and Data Validation')
plt.legend(loc=0)
plt.figure()
plt.show()

plt.plot(epochs, loss, 'r', label='Loss Training')
plt.plot(epochs, validation_loss, 'b', label='Loss Validation')
plt.title('Grapichs Loss Data Training and Data Validation')
plt.legend(loc=0)
plt.figure()
plt.show()

import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded_files = files.upload()

for fn in uploaded_files.keys():

  path = fn
  img = image.load_img(path, target_size=(150, 150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size = 20)
  print(fn)
  if classes[0][0]==1:
    print('This pict is paper suit')
  elif classes[0][1]==1:
    print('This pict is rock suit')
  elif classes[0][2]==1:
    print('This pict is scissors suit')
  else:
    print('Error 404 not found !')

# Name : Irwin Ekabakti Puspito
# No reg : 1494037162101-136